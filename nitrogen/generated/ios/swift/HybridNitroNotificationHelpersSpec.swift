///
/// HybridNitroNotificationHelpersSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridNitroNotificationHelpersSpec``
public protocol HybridNitroNotificationHelpersSpec_protocol: HybridObject {
  // Properties
  

  // Methods
  func addListener(listener: @escaping (_ notification: String) -> Void) throws -> () -> Void
  func removeListeners() throws -> () -> Void
  func getInitialClickedNotification() throws -> String?
  func storeNotification(notification: String) throws -> Void
}

/// See ``HybridNitroNotificationHelpersSpec``
open class HybridNitroNotificationHelpersSpec_base {
  private weak var cxxWrapper: HybridNitroNotificationHelpersSpec_cxx? = nil
  public func getCxxWrapper() -> HybridNitroNotificationHelpersSpec_cxx {
  #if DEBUG
    guard self is HybridNitroNotificationHelpersSpec else {
      fatalError("`self` is not a `HybridNitroNotificationHelpersSpec`! Did you accidentally inherit from `HybridNitroNotificationHelpersSpec_base` instead of `HybridNitroNotificationHelpersSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridNitroNotificationHelpersSpec_cxx(self as! HybridNitroNotificationHelpersSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the NitroNotificationHelpers HybridObject.
 * Implement this protocol to create Swift-based instances of NitroNotificationHelpers.
 * ```swift
 * class HybridNitroNotificationHelpers : HybridNitroNotificationHelpersSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridNitroNotificationHelpersSpec = HybridNitroNotificationHelpersSpec_protocol & HybridNitroNotificationHelpersSpec_base
