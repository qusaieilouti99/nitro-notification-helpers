///
/// HybridNitroNotificationHelpersSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridNitroNotificationHelpersSpec.hpp"

// Forward declaration of `HybridNitroNotificationHelpersSpec_cxx` to properly resolve imports.
namespace NitroNotificationHelpers { class HybridNitroNotificationHelpersSpec_cxx; }



#include <functional>
#include <string>
#include <optional>

#include "NitroNotificationHelpers-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::nitronotificationhelpers {

  /**
   * The C++ part of HybridNitroNotificationHelpersSpec_cxx.swift.
   *
   * HybridNitroNotificationHelpersSpecSwift (C++) accesses HybridNitroNotificationHelpersSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridNitroNotificationHelpersSpec_cxx can directly inherit from the C++ class HybridNitroNotificationHelpersSpec
   * to simplify the whole structure and memory management.
   */
  class HybridNitroNotificationHelpersSpecSwift: public virtual HybridNitroNotificationHelpersSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridNitroNotificationHelpersSpecSwift(const NitroNotificationHelpers::HybridNitroNotificationHelpersSpec_cxx& swiftPart):
      HybridObject(HybridNitroNotificationHelpersSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline NitroNotificationHelpers::HybridNitroNotificationHelpersSpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    // Get memory pressure
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }

  public:
    // Properties
    

  public:
    // Methods
    inline std::function<void()> addListener(const std::function<void(const std::string& /* notification */)>& listener) override {
      auto __result = _swiftPart.addListener(listener);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::function<void()> removeListeners() override {
      auto __result = _swiftPart.removeListeners();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::optional<std::string> getInitialClickedNotification() override {
      auto __result = _swiftPart.getInitialClickedNotification();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline void storeNotification(const std::string& notification) override {
      auto __result = _swiftPart.storeNotification(notification);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }

  private:
    NitroNotificationHelpers::HybridNitroNotificationHelpersSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::nitronotificationhelpers
