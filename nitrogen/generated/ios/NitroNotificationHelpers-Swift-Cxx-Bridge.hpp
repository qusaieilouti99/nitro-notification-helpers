///
/// NitroNotificationHelpers-Swift-Cxx-Bridge.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

// Forward declarations of C++ defined types
// Forward declaration of `HybridNitroNotificationHelpersSpec` to properly resolve imports.
namespace margelo::nitro::nitronotificationhelpers { class HybridNitroNotificationHelpersSpec; }

// Forward declarations of Swift defined types
// Forward declaration of `HybridNitroNotificationHelpersSpec_cxx` to properly resolve imports.
namespace NitroNotificationHelpers { class HybridNitroNotificationHelpersSpec_cxx; }

// Include C++ defined types
#include "HybridNitroNotificationHelpersSpec.hpp"
#include <NitroModules/Result.hpp>
#include <exception>
#include <functional>
#include <memory>
#include <optional>
#include <string>

/**
 * Contains specialized versions of C++ templated types so they can be accessed from Swift,
 * as well as helper functions to interact with those C++ types from Swift.
 */
namespace margelo::nitro::nitronotificationhelpers::bridge::swift {

  // pragma MARK: std::function<void(const std::string& /* notification */)>
  /**
   * Specialized version of `std::function<void(const std::string&)>`.
   */
  using Func_void_std__string = std::function<void(const std::string& /* notification */)>;
  /**
   * Wrapper class for a `std::function<void(const std::string& / * notification * /)>`, this can be used from Swift.
   */
  class Func_void_std__string_Wrapper final {
  public:
    explicit Func_void_std__string_Wrapper(std::function<void(const std::string& /* notification */)>&& func): _function(std::make_unique<std::function<void(const std::string& /* notification */)>>(std::move(func))) {}
    inline void call(std::string notification) const noexcept {
      _function->operator()(notification);
    }
  private:
    std::unique_ptr<std::function<void(const std::string& /* notification */)>> _function;
  } SWIFT_NONCOPYABLE;
  Func_void_std__string create_Func_void_std__string(void* _Nonnull swiftClosureWrapper) noexcept;
  inline Func_void_std__string_Wrapper wrap_Func_void_std__string(Func_void_std__string value) noexcept {
    return Func_void_std__string_Wrapper(std::move(value));
  }
  
  // pragma MARK: std::optional<std::string>
  /**
   * Specialized version of `std::optional<std::string>`.
   */
  using std__optional_std__string_ = std::optional<std::string>;
  inline std::optional<std::string> create_std__optional_std__string_(const std::string& value) noexcept {
    return std::optional<std::string>(value);
  }
  inline bool has_value_std__optional_std__string_(const std::optional<std::string>& optional) noexcept {
    return optional.has_value();
  }
  inline std::string get_std__optional_std__string_(const std::optional<std::string>& optional) noexcept {
    return *optional;
  }
  
  // pragma MARK: std::shared_ptr<HybridNitroNotificationHelpersSpec>
  /**
   * Specialized version of `std::shared_ptr<HybridNitroNotificationHelpersSpec>`.
   */
  using std__shared_ptr_HybridNitroNotificationHelpersSpec_ = std::shared_ptr<HybridNitroNotificationHelpersSpec>;
  std::shared_ptr<HybridNitroNotificationHelpersSpec> create_std__shared_ptr_HybridNitroNotificationHelpersSpec_(void* _Nonnull swiftUnsafePointer) noexcept;
  void* _Nonnull get_std__shared_ptr_HybridNitroNotificationHelpersSpec_(std__shared_ptr_HybridNitroNotificationHelpersSpec_ cppType) noexcept;
  
  // pragma MARK: std::weak_ptr<HybridNitroNotificationHelpersSpec>
  using std__weak_ptr_HybridNitroNotificationHelpersSpec_ = std::weak_ptr<HybridNitroNotificationHelpersSpec>;
  inline std__weak_ptr_HybridNitroNotificationHelpersSpec_ weakify_std__shared_ptr_HybridNitroNotificationHelpersSpec_(const std::shared_ptr<HybridNitroNotificationHelpersSpec>& strong) noexcept { return strong; }
  
  // pragma MARK: Result<void>
  using Result_void_ = Result<void>;
  inline Result_void_ create_Result_void_() noexcept {
    return Result<void>::withValue();
  }
  inline Result_void_ create_Result_void_(const std::exception_ptr& error) noexcept {
    return Result<void>::withError(error);
  }
  
  // pragma MARK: Result<std::optional<std::string>>
  using Result_std__optional_std__string__ = Result<std::optional<std::string>>;
  inline Result_std__optional_std__string__ create_Result_std__optional_std__string__(const std::optional<std::string>& value) noexcept {
    return Result<std::optional<std::string>>::withValue(value);
  }
  inline Result_std__optional_std__string__ create_Result_std__optional_std__string__(const std::exception_ptr& error) noexcept {
    return Result<std::optional<std::string>>::withError(error);
  }

} // namespace margelo::nitro::nitronotificationhelpers::bridge::swift
